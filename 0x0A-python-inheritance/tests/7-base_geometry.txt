7-base_geometry.txt testing for the integer method and the area method
==================================================

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()


---------------------------------
test for the normal integer
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
    ...
TypeError: name must be an integer


>>> bg.integer_validator("int", 0)
Traceback (most recent call last):
	...
ValueError: int must be greater than 0


---------------------------------
test for a negative number
>>> bg.integer_validator("int", -1)
Traceback (most recent call last):
	...
ValueError: int must be greater than 0

------------------------------------
test for non integer
>>> bg.integer_validator("int", "1")
Traceback (most recent call last):
	...
TypeError: int must be an integer

-------------------------------------
test for the area method
>>> bg.area()
Traceback (most recent call last):
	...
Exception: area() is not implemented

-------------------------------------
>>> bg.integer_validator("int")
Traceback (most recent call last):
	...
TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

--------------------------------------
>>> bg.integer_validator("age", (4,))
Traceback (most recent call last):
	...
TypeError: age must be an integer

>>> bg.integer_validator()
Traceback (most recent call last):
	...
TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator("age", True)
Traceback (most recent call last):
	...
TypeError: age must be an integer

>>> bg.integer_validator("age", None)
Traceback (most recent call last):
	...
TypeError: age must be an integer

>>> bg.integer_validator("age", [3])
Traceback (most recent call last):
	...
TypeError: age must be an integer
